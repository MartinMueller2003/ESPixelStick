/*
* ConstNames.hpp - List of strings that can be reused
*
* Project: ESPixelStick - An ESP8266 / ESP32 and E1.31 based pixel driver
* Copyright (c) 2021, 2022 Shelby Merrick
* http://www.forkineye.com
*
*  This program is provided free for you to use in any way that you wish,
*  subject to the laws and regulations where you are using it.  Due diligence
*  is strongly suggested before using this code.  Please give credit where due.
*
*  The Author makes no warranty of any kind, express or implied, with regard
*  to this program or the documentation contained in this document.  The
*  Author shall not be liable in any event for incidental or consequential
*  damages in connection with, or arising out of, the furnishing, performance
*  or use of these programs.
*
*/

#include "ESPixelStick.h"

const CN_PROGMEM char CN_active                   [] = "active";
const CN_PROGMEM char CN_ActiveHigh               [] = "ActiveHigh";
const CN_PROGMEM char CN_ActiveLow                [] = "ActiveLow";
const CN_PROGMEM char CN_activedelay              [] = "activedelay";
const CN_PROGMEM char CN_activevalue              [] = "activevalue";
const CN_PROGMEM char CN_addr                     [] = "addr";
const CN_PROGMEM char CN_advancedView             [] = "advancedView";
const CN_PROGMEM char CN_Alexa                    [] = "Alexa";
const CN_PROGMEM char CN_allleds                  [] = "allleds";
const CN_PROGMEM char CN_APA102                   [] = "APA102";
const CN_PROGMEM char CN_ap_fallback              [] = "ap_fallback";
const CN_PROGMEM char CN_ap_timeout               [] = "ap_timeout";
const CN_PROGMEM char CN_ap_reboot                [] = "ap_reboot";
const CN_PROGMEM char CN_appendnullcount          [] = "appendnullcount";
const CN_PROGMEM char CN_Artnet                   [] = "Artnet";
const CN_PROGMEM char CN_as                       [] = "as";
const CN_PROGMEM char CN_availabilitytopic        [] = "availability_topic";
const CN_PROGMEM char CN_b                        [] = "b";
const CN_PROGMEM char CN_b16                      [] = "b16";
const CN_PROGMEM char CN_baudrate                 [] = "baudrate";
const CN_PROGMEM char CN_blanktime                [] = "blanktime";
const CN_PROGMEM char CN_Boot                     [] = "Boot";
const CN_PROGMEM char CN_bridge                   [] = "bridge";
const CN_PROGMEM char CN_brightness               [] = "brightness";
const CN_PROGMEM char CN_bytesreceived            [] = "bytesreceived";
const CN_PROGMEM char CN_cfgver                   [] = "cfgver";
const CN_PROGMEM char CN_ChannelCount             [] = "ChannelCount";
const CN_PROGMEM char CN_channels                 [] = "channels";
const CN_PROGMEM char CN_clean                    [] = "clean";
const CN_PROGMEM char CN_clock_pin                [] = "clock_pin";
const CN_PROGMEM char CN_cmd                      [] = "cmd";
const CN_PROGMEM char CN_color                    [] = "color";
const CN_PROGMEM char CN_color_order              [] = "color_order";
const CN_PROGMEM char CN_command_topic            [] = "command_topic";
const CN_PROGMEM char CN_CompressionType          [] = "CompressionType";
const CN_PROGMEM char CN_Configuration_File_colon [] = "Configuration File: ";
const CN_PROGMEM char CN_config                   [] = "config";
const CN_PROGMEM char CN_configured               [] = "configured";
const CN_PROGMEM char CN_connected                [] = "connected";
const CN_PROGMEM char CN_connecting               [] = "connecting";
const CN_PROGMEM char CN_count                    [] = "count";
const CN_PROGMEM char CN_currenteffect            [] = "currenteffect";
const CN_PROGMEM char CN_currentlimit             [] = "currentlimit";
const CN_PROGMEM char CN_cs_pin                   [] = "cs_pin";
const CN_PROGMEM char CN_current_sequence         [] = "current_sequence";
const CN_PROGMEM char CN_data_pin                 [] = "data_pin";
const CN_PROGMEM char CN_ddp                      [] = "ddp";
const CN_PROGMEM char CN_Default                  [] = "Default";
const CN_PROGMEM char CN_device                   [] = "device";
const CN_PROGMEM char CN_dhcp                     [] = "dhcp";
const CN_PROGMEM char CN_description              [] = "description";
const CN_PROGMEM char CN_Disabled                 [] = "Disabled";
const CN_PROGMEM char CN_disabled                 [] = "disabled";
const CN_PROGMEM char CN_Disconnected             [] = "Disconnected ";
const CN_PROGMEM char CN_DMX                      [] = "DMX";
const CN_PROGMEM char CN_Dotfseq                  [] = ".fseq";
const CN_PROGMEM char CN_Dotjson                  [] = ".json";
const CN_PROGMEM char CN_Dotpl                    [] = ".pl";
const CN_PROGMEM char CN_duration                 [] = "duration";
const CN_PROGMEM char CN_e131                     [] = "e131";
const CN_PROGMEM char CN_ecb                      [] = "ecb";
const CN_PROGMEM char CN_effect                   [] = "effect";
const CN_PROGMEM char CN_effect_list              [] = "effect_list";
const CN_PROGMEM char CN_EffectAllLeds            [] = "EffectAllLeds";
const CN_PROGMEM char CN_EffectBrightness         [] = "EffectBrightness";
const CN_PROGMEM char CN_EffectColor              [] = "EffectColor";
const CN_PROGMEM char CN_EffectMirror             [] = "EffectMirror";
const CN_PROGMEM char CN_EffectReverse            [] = "EffectReverse";
const CN_PROGMEM char CN_EffectSpeed              [] = "EffectSpeed";
const CN_PROGMEM char CN_EffectWhiteChannel       [] = "EffectWhiteChannel";
const CN_PROGMEM char CN_Effect                   [] = "Effect";
const CN_PROGMEM char CN_effects                  [] = "effects";
const CN_PROGMEM char CN_EFUPD                    [] = "EFUPD";
const CN_PROGMEM char CN_en                       [] = "en";
const CN_PROGMEM char CN_enabled                  [] = "enabled";
const CN_PROGMEM char CN_End                      [] = "End";
const CN_PROGMEM char CN_entry                    [] = "entry";
const CN_PROGMEM char CN_errors                   [] = "errors";
const CN_PROGMEM char CN_Error                    [] = "Error";
const CN_PROGMEM char CN_ESP32                    [] = "ESP32";
const CN_PROGMEM char CN_ESP8266                  [] = "ESP8266";
const CN_PROGMEM char CN_ESPixelStick             [] = "ESPixelStick";
const CN_PROGMEM char CN_eth                      [] = "eth";
const CN_PROGMEM char CN_Ethernet                 [] = "Ethernet";
const CN_PROGMEM char CN_EthDrv                   [] = "EthDrv";
const CN_PROGMEM char CN_false                    [] = "false";
const CN_PROGMEM char CN_File                     [] = "File";
const CN_PROGMEM char CN_file                     [] = "file";
const CN_PROGMEM char CN_filename                 [] = "filename";
const CN_PROGMEM char CN_files                    [] = "files";
const CN_PROGMEM char CN_forkineye                [] = "forkineye";
const CN_PROGMEM char CN_Forkineye                [] = "Forkineye";
const CN_PROGMEM char CN_forkineyeSlash           [] = "forkineye/";
const CN_PROGMEM char CN_fppd                     [] = "fppd";
const CN_PROGMEM char CN_FPPDiscovery             [] = "FPPDiscovery";
const CN_PROGMEM char CN_FPPRemote                [] = "FPP Remote";
const CN_PROGMEM char CN_FppRemoteIp              [] = "FppRemoteIp";
const CN_PROGMEM char CN_Frequency                [] = "Frequency";
const CN_PROGMEM char CN_fseqfilename             [] = "fseqfilename";
const CN_PROGMEM char CN_g                        [] = "g";
const CN_PROGMEM char CN_gamma                    [] = "gamma";
const CN_PROGMEM char CN_gateway                  [] = "gateway";
const CN_PROGMEM char CN_GECE                     [] = "GECE";
const CN_PROGMEM char CN_get                      [] = "get";
const CN_PROGMEM char CN_gen_ser_hdr              [] = "gen_ser_hdr";
const CN_PROGMEM char CN_gen_ser_ftr              [] = "gen_ser_ftr";
const CN_PROGMEM char CN_gid                      [] = "gid";
const CN_PROGMEM char CN_group_size               [] = "group_size";
const CN_PROGMEM char CN_GS8208                   [] = "GS8208";
const CN_PROGMEM char CN_Heap_colon               [] = "Heap: ";
const CN_PROGMEM char CN_hadisco                  [] = "hadisco";
const CN_PROGMEM char CN_haprefix                 [] = "haprefix";
const CN_PROGMEM char CN_HostDescription          [] = "HostDescription";
const CN_PROGMEM char CN_HostName                 [] = "HostName";
const CN_PROGMEM char CN_hostname                 [] = "hostname";
const CN_PROGMEM char CN_hv                       [] = "hv";
const CN_PROGMEM char CN_id                       [] = "id";
const CN_PROGMEM char CN_ID                       [] = "ID";
const CN_PROGMEM char CN_idle                     [] = "idle";
const CN_PROGMEM char CN_Idle                     [] = "Idle";
const CN_PROGMEM char CN_identifiers              [] = "identifiers";
const CN_PROGMEM char CN_init                     [] = "init";
const CN_PROGMEM char CN_interframetime           [] = "interframetime";
const CN_PROGMEM char CN_index                    [] = "index";
const CN_PROGMEM char CN_inv                      [] = "inv";
const CN_PROGMEM char CN_ip                       [] = "ip";
const CN_PROGMEM char CN_IPS                      [] = "IPS";
const CN_PROGMEM char CN_input                    [] = "input";
const CN_PROGMEM char CN_inputbutton              [] = "inputbutton";
const CN_PROGMEM char CN_input_config             [] = "input_config";
const CN_PROGMEM char CN_json                     [] = "json";
const CN_PROGMEM char CN_json_attributes_topic    [] = "json_attributes_topic";
const CN_PROGMEM char CN_last_clientIP            [] = "last_clientIP";
const CN_PROGMEM char CN_lastData                 [] = "lastData";
const CN_PROGMEM char CN_lastReceiveTime          [] = "lastReceiveTime";
const CN_PROGMEM char CN_Length                   [] = "Length";
const CN_PROGMEM char CN_light                    [] = "/light/";
const CN_PROGMEM char CN_loaded                   [] = "loaded";
const CN_PROGMEM char CN_lwt                      [] = "lwt";
const CN_PROGMEM char CN_mac                      [] = "mac";
const CN_PROGMEM char CN_mdc_pin                  [] = "mdc_pin";
const CN_PROGMEM char CN_mdio_pin                 [] = "mdio_pin";
const CN_PROGMEM char CN_manufacturer             [] = "manufacturer";
const CN_PROGMEM char CN_majorVersion             [] = "majorVersion";
const CN_PROGMEM char CN_Max                      [] = "Max";
const CN_PROGMEM char CN_MaxChannel               [] = "MaxChannel";
const CN_PROGMEM char CN_MaxChannels              [] = "MaxChannels";
const CN_PROGMEM char CN_MemoryFree               [] = "MemoryFree";
const CN_PROGMEM char CN_Min                      [] = "Min";
const CN_PROGMEM char CN_minorVersion             [] = "minorVersion";
const CN_PROGMEM char CN_minussigns               [] = "-----";
const CN_PROGMEM char CN_mirror                   [] = "mirror";
const CN_PROGMEM char CN_miso_pin                 [] = "miso_pin";
const CN_PROGMEM char CN_mode                     [] = "mode";
const CN_PROGMEM char CN_Mode                     [] = "Mode";
const CN_PROGMEM char CN_model                    [] = "model";
const CN_PROGMEM char CN_mode_name                [] = "mode_name";
const CN_PROGMEM char CN_mosi_pin                 [] = "mosi_pin";
const CN_PROGMEM char CN_mqtt                     [] = "mqtt";
const CN_PROGMEM char CN_MQTT                     [] = "MQTT";
const CN_PROGMEM char CN_multicast                [] = "multicast";
const CN_PROGMEM char CN_name                     [] = "name";
const CN_PROGMEM char CN_Name                     [] = "Name";
const CN_PROGMEM char CN_NeedAutoConfig           [] = "NeedAutoConfig";
const CN_PROGMEM char CN_netmask                  [] = "netmask";
const CN_PROGMEM char CN_network                  [] = "network";
const CN_PROGMEM char CN_num_chan                 [] = "num_chan";
const CN_PROGMEM char CN_num_packets              [] = "num_packets";
const CN_PROGMEM char CN_NumFrames                [] = "NumFrames";
const CN_PROGMEM char CN_output                   [] = "output";
const CN_PROGMEM char CN_output_config            [] = "output_config";
const CN_PROGMEM char CN_OutputSpi                [] = "OutputSpi";
const CN_PROGMEM char CN_OutputUart               [] = "OutputUart";
const CN_PROGMEM char CN_packet_errors            [] = "packet_errors";
const CN_PROGMEM char CN_packetsreceived          [] = "packetsreceived";
const CN_PROGMEM char CN_ParseFseqFile            [] = "ParseFseqFile:: ";
const CN_PROGMEM char CN_passphrase               [] = "passphrase";
const CN_PROGMEM char CN_password                 [] = "password";
const CN_PROGMEM char CN_pause                    [] = "pause";
const CN_PROGMEM char CN_Paused                   [] = "Paused";
const CN_PROGMEM char CN_pixel_count              [] = "pixel_count";
const CN_PROGMEM char CN_pktCommand               [] = "pktCommand";
const CN_PROGMEM char CN_pktSyncSeqOpen           [] = "pktSyncSeqOpen";
const CN_PROGMEM char CN_pktSyncSeqStart          [] = "pktSyncSeqStart";
const CN_PROGMEM char CN_pktSyncSeqStop           [] = "pktSyncSeqStop";
const CN_PROGMEM char CN_pktSyncSeqSync           [] = "pktSyncSeqSync";
const CN_PROGMEM char CN_pktSyncMedOpen           [] = "pktSyncMedOpen";
const CN_PROGMEM char CN_pktSyncMedStart          [] = "pktSyncMedStart";
const CN_PROGMEM char CN_pktSyncMedStop           [] = "pktSyncMedStop";
const CN_PROGMEM char CN_pktSyncMedSync           [] = "pktSyncMedSync";
const CN_PROGMEM char CN_pktBlank                 [] = "pktBlank";
const CN_PROGMEM char CN_pktPing                  [] = "pktPing";
const CN_PROGMEM char CN_pktPlugin                [] = "pktPlugin";
const CN_PROGMEM char CN_pktFPPCommand            [] = "pktFPPCommand";
const CN_PROGMEM char CN_pktError                 [] = "pktError";
const CN_PROGMEM char CN_Platform                 [] = "Platform";
const CN_PROGMEM char CN_platform                 [] = "platform";
const CN_PROGMEM char CN_play                     [] = "play";
const CN_PROGMEM char CN_Player                   [] = "Player";
const CN_PROGMEM char CN_playcount                [] = "playcount";
const CN_PROGMEM char CN_PlayedFileCount          [] = "PlayedFileCount";
const CN_PROGMEM char CN_playing                  [] = "playing";
const CN_PROGMEM char CN_playFseq                 [] = "playFseq";
const CN_PROGMEM char CN_playlist                 [] = "playlist";
const CN_PROGMEM char CN_PlayList                 [] = "PlayList";
const CN_PROGMEM char CN_plussigns                [] = "+++++";
const CN_PROGMEM char CN_polarity                 [] = "polarity";
const CN_PROGMEM char CN_port                     [] = "port";
const CN_PROGMEM char CN_power_pin                [] = "power_pin";
const CN_PROGMEM char CN_prependnullcount         [] = "prependnullcount";
const CN_PROGMEM char CN_pwm                      [] = "pwm";
const CN_PROGMEM char CN_r                        [] = "r";
const CN_PROGMEM char CN_Ranges                   [] = "Ranges";
const CN_PROGMEM char CN_Relay                    [] = "Relay";
const CN_PROGMEM char CN_remote                   [] = "remote";
const CN_PROGMEM char CN_repeat                   [] = "repeat";
const CN_PROGMEM char CN_Renard                   [] = "Renard";
const CN_PROGMEM char CN_rev                      [] = "rev";
const CN_PROGMEM char CN_reverse                  [] = "reverse";
const CN_PROGMEM char CN_rgb                      [] = "rgb";
const CN_PROGMEM char CN_RMT                      [] = "RMT";
const CN_PROGMEM char CN_rssi                     [] = "rssi";
const CN_PROGMEM char CN_running                  [] = "running";
const CN_PROGMEM char CN_sca                      [] = "sca";
const CN_PROGMEM char CN_schema                   [] = "schema";
const CN_PROGMEM char CN_seconds_elapsed          [] = "seconds_elapsed";
const CN_PROGMEM char CN_seconds_played           [] = "seconds_played";
const CN_PROGMEM char CN_seconds_remaining        [] = "seconds_remaining";
const CN_PROGMEM char CN_sequence_filename        [] = "sequence_filename";
const CN_PROGMEM char CN_Serial                   [] = "Serial";
const CN_PROGMEM char CN_size                     [] = "size";
const CN_PROGMEM char CN_Servo_PCA9685            [] = "Servo PCA9685";
const CN_PROGMEM char CN_slashattributes          [] = "/attributes";
const CN_PROGMEM char CN_slashconfig              [] = "/config";
const CN_PROGMEM char CN_slashset                 [] = "/set";
const CN_PROGMEM char CN_slashstatus              [] = "/status";
const CN_PROGMEM char CN_Solid                    [] = "Solid";
const CN_PROGMEM char CN_speed                    [] = "speed";
const CN_PROGMEM char CN_ssid                     [] = "ssid";
const CN_PROGMEM char CN_sta_timeout              [] = "sta_timeout";
const CN_PROGMEM char CN_stars                    [] = "***";
const CN_PROGMEM char CN_Start                    [] = "Start";
const CN_PROGMEM char CN_Starting                 [] = "Starting";
const CN_PROGMEM char CN_state                    [] = "state";
const CN_PROGMEM char CN_statetopic               [] = "state_topic";
const CN_PROGMEM char CN_status                   [] = "status";
const CN_PROGMEM char CN_status_name              [] = "status_name";
const CN_PROGMEM char CN_StayInApMode             [] = "StayInApMode";
const CN_PROGMEM char CN_StepTime                 [] = "StepTime";
const CN_PROGMEM char CN_Stopping                 [] = "Stopping";
const CN_PROGMEM char CN_subnet                   [] = "subnet";
const CN_PROGMEM char CN_sw_version               [] = "sw_version";
const CN_PROGMEM char CN_SyncAdjustmentCount      [] = "SyncAdjustmentCount";
const CN_PROGMEM char CN_SyncCount                [] = "SyncCount";
const CN_PROGMEM char CN_SyncOffset               [] = "SyncOffset";
const CN_PROGMEM char CN_system                   [] = "system";
const CN_PROGMEM char CN_textSLASHplain           [] = "text/plain";
const CN_PROGMEM char CN_time                     [] = "time";
const CN_PROGMEM char CN_time_elapsed             [] = "time_elapsed";
const CN_PROGMEM char CN_TimeRemaining            [] = "TimeRemaining";
const CN_PROGMEM char CN_time_remaining           [] = "time_remaining";
const CN_PROGMEM char CN_TLS3001                  [] = "TLS3001";
const CN_PROGMEM char CN_TM1814                   [] = "TM1814";
const CN_PROGMEM char CN_topic                    [] = "topic";
const CN_PROGMEM char CN_topicset                 [] = "topicset";
const CN_PROGMEM char CN_transitions              [] = "transitions";
const CN_PROGMEM char CN_trig                     [] = "trig";
const CN_PROGMEM char CN_true                     [] = "true";
const CN_PROGMEM char CN_type                     [] = "type";
const CN_PROGMEM char CN_typeId                   [] = "typeId";
const CN_PROGMEM char CN_UCS1903                  [] = "UCS1903";
const CN_PROGMEM char CN_UCS8903                  [] = "UCS8903";
const CN_PROGMEM char CN_ui                       [] = "ui";
const CN_PROGMEM char CN_unichanlim               [] = "unichanlim";
const CN_PROGMEM char CN_unifirst                 [] = "unifirst";
const CN_PROGMEM char CN_unilast                  [] = "unilast";
const CN_PROGMEM char CN_universe                 [] = "universe";
const CN_PROGMEM char CN_universe_limit           [] = "universe_limit";
const CN_PROGMEM char CN_universe_start           [] = "universe_start";
const CN_PROGMEM char CN_unique_id                [] = "unique_id";
const CN_PROGMEM char CN_updateinterval           [] = "updateinterval";
const CN_PROGMEM char CN_Uptime                   [] = "Uptime";
const CN_PROGMEM char CN_used                     [] = "used";
const CN_PROGMEM char CN_user                     [] = "user";
const CN_PROGMEM char CN_Utilization              [] = "Utilization";
const CN_PROGMEM char CN_variableHeaders          [] = "variableHeaders";
const CN_PROGMEM char CN_Variant                  [] = "Variant";
const CN_PROGMEM char CN_version                  [] = "version";
const CN_PROGMEM char CN_Version                  [] = "Version";
const CN_PROGMEM char CN_volume                   [] = "volume";
const CN_PROGMEM char CN_weus                     [] = "weus";
const CN_PROGMEM char CN_wifi                     [] = "wifi";
const CN_PROGMEM char CN_WiFiDrv                  [] = "WiFiDrv";
const CN_PROGMEM char CN_WS2801                   [] = "WS2801";
const CN_PROGMEM char CN_WS2811                   [] = "WS2811";
const CN_PROGMEM char CN_XP                       [] = "XP";
const CN_PROGMEM char CN_zig_size                 [] = "zig_size";

const CN_PROGMEM char CN_wrgb                     [] = "wrgb";
const CN_PROGMEM char CN_rgbw                     [] = "rgbw";
const CN_PROGMEM char CN_grbw                     [] = "grbw";
const CN_PROGMEM char CN_brgw                     [] = "brgw";
const CN_PROGMEM char CN_rbgw                     [] = "rbgw";
const CN_PROGMEM char CN_gbrw                     [] = "gbrw";
const CN_PROGMEM char CN_bgrw                     [] = "bgrw";
const CN_PROGMEM char CN_grb                      [] = "grb";
const CN_PROGMEM char CN_brg                      [] = "brg";
const CN_PROGMEM char CN_rbg                      [] = "rbg";
const CN_PROGMEM char CN_gbr                      [] = "gbr";
const CN_PROGMEM char CN_bgr                      [] = "bgr";

const CN_PROGMEM char MN_01                       [] = " Requested channel count was not valid. Setting to ";
const CN_PROGMEM char MN_02                       [] = " Requested channel count was not valid. Insuficient number of input channels available ";
const CN_PROGMEM char MN_03                       [] = " Disabling channel '";
const CN_PROGMEM char MN_04                       [] = "No channel settings found. Using defaults";
const CN_PROGMEM char MN_05                       [] = "No settings found for channel '";
const CN_PROGMEM char MN_06                       [] = " output type for channel '";
const CN_PROGMEM char MN_07                       [] = " Cannot Start ";
const CN_PROGMEM char MN_08                       [] = " for channel '";
const CN_PROGMEM char MN_09                       [] = " Unknown output type: '";
const CN_PROGMEM char MN_10                       [] = "' for channel '";
const CN_PROGMEM char MN_11                       [] = "'. Using disabled. ";
const CN_PROGMEM char MN_12                       [] = " Shutting Down '";
const CN_PROGMEM char MN_13                       [] = "' on Output: ";
const CN_PROGMEM char MN_14                       [] = "' Initialization for Output: ";
const CN_PROGMEM char MN_15                       [] = " Error loading Output Manager Config File ";
const CN_PROGMEM char MN_16                       [] = "No Output Settings Found for Channel '";
const CN_PROGMEM char MN_17                       [] = "OutputMgr: Incorrect Version found. Using existing/default config.";
const CN_PROGMEM char MN_18                       [] = "'. Using Defaults";
const CN_PROGMEM char MN_19                       [] = "Invalid Channel Type in config '";
const CN_PROGMEM char MN_20                       [] = "'. Specified for channel '";
const CN_PROGMEM char MN_21                       [] = " Error Saving Output Manager Config File ";
const CN_PROGMEM char MN_22                       [] = "ERROR: Too many output channels have been Requested: ";
const CN_PROGMEM char MN_23                       [] = "ERROR: Universe configuration is too small to fill output buffer. Outputs have been truncated.";
const CN_PROGMEM char MN_24                       [] = "Subscribed to broadcast";
const CN_PROGMEM char MN_25                       [] = "Listening for ";
const CN_PROGMEM char MN_26                       [] = " channels from Universe ";
const CN_PROGMEM char MN_27                       [] = " to ";
const CN_PROGMEM char MN_28                       [] = "Listening on port ";
const CN_PROGMEM char MN_29                       [] = "ERROR: Universe configuration is too small to fill output buffer. Outputs have been truncated.";
const CN_PROGMEM char MN_30                       [] = "Requesting reboot on change of UDP port.";
const CN_PROGMEM char MN_31                       [] = " E1.31 MULTICAST INIT FAILED ";
const CN_PROGMEM char MN_32                       [] = " E1.31 UNICAST INIT FAILED ";
const CN_PROGMEM char MN_33                       [] = " Flash file system did not initialize correctly ";
const CN_PROGMEM char MN_34                       [] = "Flash file system initialized.";
const CN_PROGMEM char MN_35                       [] = " Used = ";
const CN_PROGMEM char MN_36                       [] = " out of ";
const CN_PROGMEM char MN_37                       [] = "No File Manager settings found.";
const CN_PROGMEM char MN_38                       [] = "No SD card installed";
const CN_PROGMEM char MN_39                       [] = "ERROR: Could not init the SD Card: ";
const CN_PROGMEM char MN_40                       [] = "Listing directory: ";
const CN_PROGMEM char MN_41                       [] = "failed to open directory: ";
const CN_PROGMEM char MN_42                       [] = "Is not a directory: ";
const CN_PROGMEM char MN_43                       [] = " Could not open file for reading ";
const CN_PROGMEM char MN_44                       [] = "Deserialzation Error. Error code = ";
const CN_PROGMEM char MN_45                       [] = "requesting reboot on loss of WiFi connection.";
const CN_PROGMEM char MN_46                       [] = "Setting new effect: ";
const CN_PROGMEM char MN_47                       [] = "File Name does not end with a valid .fseq or .pl extension: '";
const CN_PROGMEM char MN_48                       [] = "Invalid File Name";
const CN_PROGMEM char MN_49                       [] = "Effect Config: '";
const CN_PROGMEM char MN_50                       [] = "Playing Effect: '";
const CN_PROGMEM char MN_51                       [] = "00:00";
const CN_PROGMEM char MN_52                       [] = " Could not read FSEQ header: filename: '";
const CN_PROGMEM char MN_53                       [] = " Could not start. ";
const CN_PROGMEM char MN_54                       [] = " is not a v2 uncompressed sequence";
const CN_PROGMEM char MN_55                       [] = " File does not contain enough data to meet the Stated Channel Count * Number of Frames value. Expected ";
const CN_PROGMEM char MN_56                       [] = ", Got: ";
const CN_PROGMEM char MN_57                       [] = " Too many sparse ranges defined in file header.";
const CN_PROGMEM char MN_58                       [] = "Ignoring Range Info. ";
const CN_PROGMEM char MN_59                       [] = " No channels defined in Sparse Ranges.";
const CN_PROGMEM char MN_60                       [] = " Too many channels defined in Sparse Ranges.";
const CN_PROGMEM char MN_61                       [] = " Sparse Range Frame offset + Num channels is larger than frame size.";
const CN_PROGMEM char MN_62                       [] = "Could not read Playlist file: '";
const CN_PROGMEM char MN_63                       [] = "SD file: '";
const CN_PROGMEM char MN_64                       [] = "Unsupported Play List Entry type: '";
const CN_PROGMEM char MN_65                       [] = "Effects Control";
const CN_PROGMEM char MN_66                       [] = "WARNING: Creating a new Input Manager configuration Data set";
const CN_PROGMEM char MN_67                       [] = "Shutting Down '";
const CN_PROGMEM char MN_68                       [] = "' on Input: ";
const CN_PROGMEM char MN_69                       [] = " Input type for channel '";
const CN_PROGMEM char MN_70                       [] = " Unknown Input type for channel '";
const CN_PROGMEM char MN_71                       [] = " Error loading Input Manager Config File ";
const CN_PROGMEM char MN_72                       [] = "No Input Interface Settings Found";
const CN_PROGMEM char MN_73                       [] = "InputMgr:: ";
const CN_PROGMEM char MN_74                       [] = "ProcessJsonConfig";
const CN_PROGMEM char MN_75                       [] = "Incorrect Version found. Using existing/default config.";
const CN_PROGMEM char MN_76                       [] = "No Input Button Settings Found";
const CN_PROGMEM char MN_77                       [] = "No Input Channel Settings Found";
const CN_PROGMEM char MN_78                       [] = "No Input Settings Found for Channel '";
const CN_PROGMEM char MN_79                       [] = "Invalid Channel Type in config '";
const CN_PROGMEM char MN_80                       [] = "'. Specified for channel '";
const CN_PROGMEM char MN_81                       [] = "'. Disabling channel";
const CN_PROGMEM char MN_82                       [] = " Error Saving Input Manager Config File ";
const CN_PROGMEM char MN_83                       [] = "Connecting to broker ";
const CN_PROGMEM char MN_84                       [] = "Disconnecting from broker";
const CN_PROGMEM char MN_85                       [] = "ERROR: Unsupported file type for File Play operation. File:'";
const CN_PROGMEM char MN_86                       [] = "Entering State: ";
const CN_PROGMEM char MN_87                       [] = "Could not disconnect Ethernet";
const CN_PROGMEM char MN_88                       [] = "Configuration change requires system reboot.";
const CN_PROGMEM char MN_89                       [] = "Connecting to Ethernet using DHCP";
const CN_PROGMEM char MN_90                       [] = "ERROR: STATIC SELECTED WITHOUT IP. Using DHCP assigned address";
const CN_PROGMEM char MN_91                       [] = "Connecting to Ethernet with Static IP";
const CN_PROGMEM char MN_92                       [] = "Connected with IP: ";
const CN_PROGMEM char MN_93                       [] = "Wait for IP Address";
const CN_PROGMEM char MN_94                       [] = "Got IP";
const CN_PROGMEM char MN_95                       [] = "Device Init Failed";
const CN_PROGMEM char MN_96                       [] = "No network config found";
const CN_PROGMEM char MN_97                       [] = "Using old style WiFi Settings";
const CN_PROGMEM char MN_98                       [] = "No network Ethernet settings found";
const CN_PROGMEM char MN_99                       [] = "WiFi Entering State: ";
const CN_PROGMEM char MN_100                      [] = "wificonfig.json";
const CN_PROGMEM char MN_101                      [] = "Connecting to '";
const CN_PROGMEM char MN_102                      [] = " as ";
const CN_PROGMEM char MN_103                      [] = "Using DHCP";
const CN_PROGMEM char MN_104                      [] = "Using Static IP";
const CN_PROGMEM char MN_105                      [] = "WiFi Failed to connect using Configured Credentials";
const CN_PROGMEM char MN_106                      [] = "WiFi Failed to connect using default Credentials";
const CN_PROGMEM char MN_107                      [] = "WiFi STA Failed to connect";
const CN_PROGMEM char MN_108                      [] = "WiFi SOFTAP:       ssid: ";
const CN_PROGMEM char MN_109                      [] = "WiFi SOFTAP: IP Address: ";
const CN_PROGMEM char MN_110                      [] = "WiFi SOFTAP: Not enabled";
const CN_PROGMEM char MN_111                      [] = "WiFi Lost the connection to the AP";
const CN_PROGMEM char MN_112                      [] = "WiFi Lost the connection to the STA";
const CN_PROGMEM char MN_113                      [] = "Connected to STA with IP: ";
const CN_PROGMEM char MN_114                      [] = "WiFi STA Disconnected";
const CN_PROGMEM char MN_115                      [] = "WiFi Requesting Reboot";
const CN_PROGMEM char MN_116                      [] = "Connecting Using Config Credentials";
const CN_PROGMEM char MN_117                      [] = "Connecting Using Default Credentials";
const CN_PROGMEM char MN_118                      [] = "Connected To AP";
const CN_PROGMEM char MN_119                      [] = "Connecting As AP";
const CN_PROGMEM char MN_120                      [] = "Connected To STA";
const CN_PROGMEM char MN_121                      [] = "Connection Failed";
const CN_PROGMEM char MN_122                      [] = " Requested ZigZag size count was too high. Setting to ";
const CN_PROGMEM char MN_123                      [] = " Requested channel count was vot valid. Insuficient number of input channels avaialable ";
const CN_PROGMEM char MN_124                      [] = "No output channel settings found";
const CN_PROGMEM char MN_125                      [] = "SPI User Parm is null.";
const CN_PROGMEM char MN_126                      [] = "FAILED to subscribed to broadcast messages";
const CN_PROGMEM char MN_127                      [] = "FAILED to subscribed to multicast messages";
const CN_PROGMEM char MN_128                      [] = "/api/sequence/";
const CN_PROGMEM char MN_129                      [] = "/meta";
const CN_PROGMEM char MN_130                      [] = "application/json";
const CN_PROGMEM char MN_131                      [] = "uploadFile";
const CN_PROGMEM char MN_132                      [] = "FPPDiscovery::ProcessPOST: File Does Not Exist - FileName: ";
const CN_PROGMEM char MN_133                      [] = "getFPPstatus";
const CN_PROGMEM char MN_134                      [] = "media_filename";
const CN_PROGMEM char MN_135                      [] = "current_song";
const CN_PROGMEM char MN_136                      [] = "current_playlist";
const CN_PROGMEM char MN_137                      [] = "advancedView";
const CN_PROGMEM char MN_138                      [] = "getSysInfo";
const CN_PROGMEM char MN_139                      [] = "getHostNameInfo";
const CN_PROGMEM char MN_140                      [] = "getChannelOutputs";
const CN_PROGMEM char MN_141                      [] = "co-other";
const CN_PROGMEM char MN_142                      [] = "";
const CN_PROGMEM char MN_143                      [] = "";
const CN_PROGMEM char MN_144                      [] = "";
const CN_PROGMEM char MN_145                      [] = "";
const CN_PROGMEM char MN_146                      [] = "";
const CN_PROGMEM char MN_147                      [] = "";
const CN_PROGMEM char MN_148                      [] = "";
const CN_PROGMEM char MN_149                      [] = "";
const CN_PROGMEM char MN_150                      [] = "";
